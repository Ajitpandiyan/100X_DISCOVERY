name: Frontend CI/CD

on:
  push:
    paths:
      - 'frontend/**'
    branches: [ main ]
  pull_request:
    paths:
      - 'frontend/**'
    branches: [ main ]

env:
  PYTHON_VERSION: "3.9"

jobs:
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        cd frontend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black isort
    
    - name: Check formatting with Black
      run: |
        cd frontend
        python -m black . --check
    
    - name: Check imports with isort
      run: |
        cd frontend
        python -m isort . --check-only --profile black

  test:
    needs: lint
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        cd frontend
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run tests with coverage
      run: |
        cd frontend
        pytest --cov=src --cov-report=xml
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage.xml
        flags: frontend

  deploy:
    needs: [lint, test]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        cd frontend
        pip install -r requirements.txt

    - name: Create .streamlit directory
      run: mkdir -p frontend/.streamlit

    - name: Create secrets.toml
      run: |
        echo "[general]" > frontend/.streamlit/secrets.toml
        echo "STREAMLIT_TOKEN = \"${{ secrets.STREAMLIT_TOKEN }}\"" >> frontend/.streamlit/secrets.toml
        echo "BACKEND_API_KEY = \"${{ secrets.BACKEND_API_KEY }}\"" >> frontend/.streamlit/secrets.toml
        echo "BACKEND_API_URL = \"${{ secrets.BACKEND_API_URL }}\"" >> frontend/.streamlit/secrets.toml
      env:
        BACKEND_API_KEY: ${{ secrets.BACKEND_API_KEY }}

    - name: Deploy to Streamlit Cloud
      env:
        STREAMLIT_API_KEY: ${{ secrets.STREAMLIT_API_KEY }}
      run: |
        # Install Streamlit CLI if needed
        pip install streamlit
        
        # Deploy using Streamlit CLI (example - adjust based on actual Streamlit Cloud deployment method)
        echo "Deploying to Streamlit Cloud..."
        # Add actual deployment command here when Streamlit provides CLI deployment support
        
        # For now, this is a placeholder as Streamlit Cloud uses GitHub integration
        echo "Note: Streamlit Cloud automatically deploys from GitHub. Please ensure GitHub integration is set up in Streamlit Cloud."