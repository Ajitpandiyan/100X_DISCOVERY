name: Frontend CI/CD

on:
  push:
    paths:
      - 'frontend/**'
    branches: [ main ]
  pull_request:
    paths:
      - 'frontend/**'
    branches: [ main ]

env:
  PYTHON_VERSION: "3.9"

jobs:
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        cd frontend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black isort
    
    - name: Check formatting with Black
      run: |
        cd frontend
        python -m black . --check
    
    - name: Check imports with isort
      run: |
        cd frontend
        python -m isort . --check-only --profile black

  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        cd frontend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest
    
    - name: Create test environment file
      run: |
        cd frontend
        echo "STREAMLIT_TOKEN=test_token" > .env
        echo "BACKEND_API_KEY=test_key" >> .env
        echo "BACKEND_API_URL=http://localhost:8000" >> .env
    
    - name: Run tests
      run: |
        cd frontend
        python -m pytest tests/test_basic.py -v
      env:
        PYTHONPATH: ${{ github.workspace }}/frontend

  deploy:
    needs: [test]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        cd frontend
        pip install -r requirements.txt

    - name: Create .streamlit directory
      run: mkdir -p frontend/.streamlit

    - name: Create secrets.toml
      run: |
        echo "[general]" > frontend/.streamlit/secrets.toml
        echo "STREAMLIT_TOKEN = \"${{ secrets.STREAMLIT_TOKEN || 'dummy_token' }}\"" >> frontend/.streamlit/secrets.toml
        echo "BACKEND_API_KEY = \"${{ secrets.BACKEND_API_KEY || 'dummy_key' }}\"" >> frontend/.streamlit/secrets.toml
        echo "BACKEND_API_URL = \"${{ secrets.BACKEND_API_URL || 'http://localhost:8000' }}\"" >> frontend/.streamlit/secrets.toml

    - name: Deploy to Streamlit Cloud
      run: |
        # Install Streamlit CLI if needed
        pip install streamlit
        
        # For now, this is a placeholder as Streamlit Cloud uses GitHub integration
        echo "Note: Streamlit Cloud automatically deploys from GitHub. Please ensure GitHub integration is set up in Streamlit Cloud."
        echo "Deployment complete!"