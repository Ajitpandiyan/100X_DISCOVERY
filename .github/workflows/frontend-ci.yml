name: Frontend CI/CD

on:
  push:
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci.yml'
    branches: [ main ]
  pull_request:
    paths:
      - 'frontend/**'
    branches: [ main ]

env:
  PYTHON_VERSION: "3.9"

jobs:
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        cd frontend
        python -m pip install --upgrade pip
        # Add retry mechanism for dependency installation
        for i in 1 2 3 4 5; do
          echo "Attempt $i to install dependencies..."
          pip install -r requirements.txt --index-url=https://pypi.org/simple --no-cache-dir && break || { 
            if [ $i -lt 5 ]; then
              echo "Dependency installation failed, retrying in 20 seconds..."
              sleep 20
            else
              echo "Dependency installation failed after 5 attempts"
              exit 1
            fi
          }
        done
        # Install linting tools separately with retry
        for i in 1 2 3 4 5; do
          echo "Attempt $i to install linting tools..."
          pip install black==23.11.0 isort==5.12.0 --index-url=https://pypi.org/simple --no-cache-dir && break || {
            if [ $i -lt 5 ]; then
              echo "Tools installation failed, retrying in 20 seconds..."
              sleep 20
            else
              echo "Tools installation failed after 5 attempts"
              exit 1
            fi
          }
        done
    
    - name: Check formatting with Black
      run: |
        cd frontend
        # Use the --skip-string-normalization flag to match the pyproject.toml configuration
        python -m black . --check --skip-string-normalization
    
    - name: Check imports with isort
      run: |
        cd frontend
        python -m isort . --check-only --profile black

  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        cd frontend
        python -m pip install --upgrade pip
        # Add retry mechanism for dependency installation
        for i in 1 2 3 4 5; do
          echo "Attempt $i to install dependencies..."
          pip install -r requirements.txt --index-url=https://pypi.org/simple --no-cache-dir && break || { 
            if [ $i -lt 5 ]; then
              echo "Dependency installation failed, retrying in 20 seconds..."
              sleep 20
            else
              echo "Dependency installation failed after 5 attempts"
              exit 1
            fi
          }
        done
        # Install test tools separately with retry
        for i in 1 2 3 4 5; do
          echo "Attempt $i to install test tools..."
          pip install pytest pytest-cov --index-url=https://pypi.org/simple --no-cache-dir && break || {
            if [ $i -lt 5 ]; then
              echo "Test tools installation failed, retrying in 20 seconds..."
              sleep 20
            else
              echo "Test tools installation failed after 5 attempts"
              exit 1
            fi
          }
        done
    
    - name: Create test environment file
      run: |
        cd frontend
        echo "STREAMLIT_TOKEN=test_token" > .env
        echo "BACKEND_API_KEY=test_key" >> .env
        echo "BACKEND_API_URL=http://localhost:8000" >> .env
        
        # Also create .streamlit directory and secrets.toml for testing
        mkdir -p .streamlit
        echo "[general]" > .streamlit/secrets.toml
        echo "STREAMLIT_TOKEN = \"test_token\"" >> .streamlit/secrets.toml
        echo "BACKEND_API_KEY = \"test_key\"" >> .streamlit/secrets.toml
        echo "BACKEND_API_URL = \"http://localhost:8000\"" >> .streamlit/secrets.toml
    
    - name: Run tests
      run: |
        cd frontend
        python -m pytest tests/test_basic.py -v
      env:
        PYTHONPATH: ${{ github.workspace }}/frontend
        
    - name: Verify configuration
      run: |
        cd frontend
        echo "Verifying configuration..."
        python test_config.py

  deploy:
    needs: [test]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        cd frontend
        python -m pip install --upgrade pip
        # Add retry mechanism for dependency installation
        for i in 1 2 3 4 5; do
          echo "Attempt $i to install dependencies..."
          pip install -r requirements.txt --index-url=https://pypi.org/simple --no-cache-dir && break || { 
            if [ $i -lt 5 ]; then
              echo "Dependency installation failed, retrying in 20 seconds..."
              sleep 20
            else
              echo "Dependency installation failed after 5 attempts"
              exit 1
            fi
          }
        done

    - name: Create .streamlit directory
      run: mkdir -p frontend/.streamlit

    - name: Create secrets.toml
      run: |
        echo "[general]" > frontend/.streamlit/secrets.toml
        echo "STREAMLIT_TOKEN = \"${{ secrets.STREAMLIT_TOKEN || 'dummy_token' }}\"" >> frontend/.streamlit/secrets.toml
        echo "BACKEND_API_KEY = \"${{ secrets.BACKEND_API_KEY || 'dummy_key' }}\"" >> frontend/.streamlit/secrets.toml
        echo "BACKEND_API_URL = \"${{ secrets.BACKEND_API_URL || 'http://localhost:8000' }}\"" >> frontend/.streamlit/secrets.toml
        
        # Create .env file for local environment variables
        echo "BACKEND_API_KEY=${{ secrets.BACKEND_API_KEY || 'dummy_key' }}" > frontend/.env
        echo "BACKEND_API_URL=${{ secrets.BACKEND_API_URL || 'http://localhost:8000' }}" >> frontend/.env
        echo "STREAMLIT_TOKEN=${{ secrets.STREAMLIT_TOKEN || 'dummy_token' }}" >> frontend/.env
        
        # Verify the environment variables are set
        echo "Verifying environment configuration..."
        echo "BACKEND_API_URL is set to: '${{ secrets.BACKEND_API_URL || 'http://localhost:8000' }}'"

    - name: Deploy to Streamlit Cloud
      run: |
        # Install Streamlit CLI if needed
        pip install streamlit
        
        # For now, this is a placeholder as Streamlit Cloud uses GitHub integration
        echo "Note: Streamlit Cloud automatically deploys from GitHub. Please ensure GitHub integration is set up in Streamlit Cloud."
        echo "Deployment complete!" 